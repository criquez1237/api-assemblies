meta {
  name: Get All Products - Client
  type: http
  seq: 9
}

get {
  url: http://localhost:8081/api/products
  body: none
  auth: bearer
}

auth:bearer {
  token: eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJjOTFmMGIxZS0zNmY1LTRmOWItYTE0YS0yZTVmZGUzZjNlZjUiLCJ1c2VyTmFtZSI6ImFsaWNlMDEiLCJzdWIiOiJhbGljZTAxQGV4YW1wbGUuY29tIiwiaWF0IjoxNzUzMTQ2MzI0LCJleHAiOjE3NTMyMzI3MjR9.2u3JFGxr3obdIXI-yMskDJ2LM9Z_r2sgjK8b2nAfxiZwH43f9wH1v1UY3GfQLxr-vIsdM0Rg_ySro2GLNYl_5w
}

tests {
  test("Response status is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Returns array of products", function() {
    const products = res.getBody();
    expect(products).to.be.an('array');
  });
  
  test("Client only sees active, visible, non-deleted products", function() {
    const products = res.getBody();
    // Como el filtro se hace en el repositorio, todos los productos
    // devueltos deberían cumplir estas condiciones
    products.forEach(product => {
      // Verificar que no incluye campos internos
      expect(product).to.not.have.property('subCategoryId');
      expect(product).to.not.have.property('stockQuantity');
      expect(product).to.not.have.property('actived');
      expect(product).to.not.have.property('visible');
      expect(product).to.not.have.property('deleted');
      expect(product).to.not.have.property('createdAt');
      expect(product).to.not.have.property('updatedAt');
      expect(product).to.not.have.property('deletedAt');
    });
  });
  
  test("Client data contains only essential fields", function() {
    const products = res.getBody();
    if (products.length > 0) {
      const product = products[0];
      expect(product).to.have.property('id');
      expect(product).to.have.property('name');
      expect(product).to.have.property('description');
      expect(product).to.have.property('specifications');
      expect(product).to.have.property('brandName');
      expect(product).to.have.property('price');
      expect(product).to.have.property('gallery');
    }
  });
  
  test("All specifications and gallery are filtered for client", function() {
    const products = res.getBody();
    products.forEach(product => {
      // Verificar especificaciones
      if (product.specifications && product.specifications.length > 0) {
        product.specifications.forEach(spec => {
          expect(spec.visible).to.be.true;
          expect(spec.actived).to.be.true;
          expect(spec.deleted).to.be.false;
        });
      }
      
      // Verificar galería
      if (product.gallery && product.gallery.length > 0) {
        product.gallery.forEach(img => {
          expect(img.visible).to.be.true;
          expect(img.actived).to.be.true;
          expect(img.deleted).to.be.false;
        });
      }
    });
  });
}
