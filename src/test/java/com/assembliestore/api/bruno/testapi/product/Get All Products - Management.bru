meta {
  name: Get All Products - Management
  type: http
  seq: 8
}

get {
  url: {{baseUrl}}/v1/products
  body: none
  auth: bearer
}

auth:bearer {
  token: {{managementToken}}
}

tests {
  test("Response status is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Returns array of products", function() {
    const products = res.getBody();
    expect(products).to.be.an('array');
  });
  
  test("Management doesn't see deleted products", function() {
    const products = res.getBody();
    products.forEach(product => {
      expect(product.deleted).to.be.false;
    });
  });
  
  test("Management sees internal data but filtered", function() {
    const products = res.getBody();
    if (products.length > 0) {
      const product = products[0];
      expect(product).to.have.property('id');
      expect(product).to.have.property('name');
      expect(product).to.have.property('subCategoryId');
      expect(product).to.have.property('stockQuantity');
      expect(product).to.have.property('actived');
      expect(product).to.have.property('visible');
      expect(product).to.have.property('deleted');
      expect(product).to.have.property('createdAt');
      expect(product).to.have.property('updatedAt');
    }
  });
  
  test("Specifications are filtered (no deleted)", function() {
    const products = res.getBody();
    products.forEach(product => {
      if (product.specifications && product.specifications.length > 0) {
        product.specifications.forEach(spec => {
          expect(spec.deleted).to.be.false;
        });
      }
    });
  });
}
