meta {
  name: Get Product by ID - Admin
  type: http
  seq: 4
}

get {
  url: http://localhost:8081/api/products/ca217548-f3fb-426e-b8dc-740700b2c1d1
  body: none
  auth: bearer
}

auth:bearer {
  token: eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJjOTFmMGIxZS0zNmY1LTRmOWItYTE0YS0yZTVmZGUzZjNlZjUiLCJ1c2VyTmFtZSI6ImFsaWNlMDEiLCJzdWIiOiJhbGljZTAxQGV4YW1wbGUuY29tIiwiaWF0IjoxNzUzMTQ2MzI0LCJleHAiOjE3NTMyMzI3MjR9.2u3JFGxr3obdIXI-yMskDJ2LM9Z_r2sgjK8b2nAfxiZwH43f9wH1v1UY3GfQLxr-vIsdM0Rg_ySro2GLNYl_5w
}

tests {
  test("Response status is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Product data is complete for admin", function() {
    const product = res.getBody();
    expect(product).to.have.property('id');
    expect(product).to.have.property('name');
    expect(product).to.have.property('description');
    expect(product).to.have.property('specifications');
    expect(product).to.have.property('brandName');
    expect(product).to.have.property('price');
    expect(product).to.have.property('gallery');
    expect(product).to.have.property('subCategoryId');
    expect(product).to.have.property('stockQuantity');
    expect(product).to.have.property('actived');
    expect(product).to.have.property('visible');
    expect(product).to.have.property('deleted');
    expect(product).to.have.property('createdAt');
    expect(product).to.have.property('updatedAt');
  });
  
  test("Price has correct decimal format", function() {
    const product = res.getBody();
    expect(product.price).to.be.a('number');
    // Verificar que tiene m√°ximo 2 decimales
    const priceString = product.price.toString();
    const decimals = priceString.split('.')[1];
    if (decimals) {
      expect(decimals.length).to.be.at.most(2);
    }
  });
}
